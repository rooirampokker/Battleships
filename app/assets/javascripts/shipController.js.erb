	var ships = {
				"carrier_5x1": {
					"size": 5,
					"name": "Carrier",
					"fileName": "carrier_5x1" 
				},
				"battleship_4x1": {
					"size": 4,
					"name": "Battleship",
					"fileName": "battleship_4x1" 
				},					
				"destroyer_3x1": {
					"size": 3,
					"name": "Destroyer",
					"fileName": "destroyer_3x1" 
				},
				"submarine1_2x1": {
					"size": 2,
					"name": "Submarine 1",
					"fileName": "submarine_2x1" 
				},					
				"submarine2_2x1": {
					"size": 2,
					"name": "Submarine 2",
					"fileName": "submarine_2x1" 
				},
				"patrolboat1_1x1": {
					"size": 1,
					"name": "Patrol Boat 1",
					"fileName": "patrolboat_1x1" 
				},			
				"patrolboat2_1x1": {
					"size": 1,
					"name": "Patrol Boat 2",
					"fileName": "patrolboat_1x1" 
				}
			}

function autoPlaceShips(event) {
	var oceanMap = [];

	console.log("--------------- start new game ---------------");
	$.each(ships, function(key,shipAttr) {
			var shipElement = $( "#drag_"+key);
			doTurn(shipElement, event, key);
			//try to place until we have a good fit
			var counter = 0;
			while (counter < 100) {
				var shipPos = [];

				var startRow = startSeed(shipAttr.size, 10);
				var startCol = startSeed(shipAttr.size, 10);
				if (sessionStorage.getItem(key) === "vertical") {
					endRow = startRow+shipAttr.size-1;
					endCol = startCol;
					for (var x=0; x<shipAttr.size; x++) {
						shipPos.push(parseFloat(startRow+x)+"_"+parseFloat(startCol));
					}					
				} else { //ship is horizontal
					endRow = startRow;
					endCol = startCol+shipAttr.size-1;
					for (var x=0; x<shipAttr.size; x++) {
					 	shipPos.push(parseFloat(startRow)+"_"+parseFloat(startCol+x));
					}								
				}				

				//this section uses jquery.simulate to 'drag and drop' the ships to the grid, based on the supplied coordinates
				ship = shipElement.draggable();
				oceanGrid = $( "#playerTable_"+startRow+"_"+startCol).droppable();

				oceanOffset = oceanGrid.offset();
				shipOffset = shipElement.offset();
				dx = oceanOffset.left - shipOffset.left;
				dy = oceanOffset.top - shipOffset.top;
				ship.simulate( "drag", {
				    dx: dx,
				    dy: dy
				});	

				//does this intersect with any other ship?
				var intersect = _.intersection(oceanMap, shipPos);
				if (intersect.length === 0) {
					_.each(shipPos, function(value){
						oceanMap.push(value);
					});
					console.log(shipAttr.name+" placed at at "+shipPos);
					break;
				} else {
					console.log(shipAttr.name+" collision at "+intersect);

				}	
				counter++;
	  	}
	}); 
	
}
/*
* bool return wil be evaluated as horisontal or vertical
* all ships always start off as horizontal
*/
function doTurn(shipElement, event, shipName) {
	var orientation = "";
	if (Math.random() >= 0.5) {
		orientation = rotateShip(shipElement, event, 90, shipName);
		console.log(shipName+" was turned "+orientation);
	} else console.log(shipName+" was left "+sessionStorage.getItem(shipName));
}
/*
* selects random coordinate - offset is created to ensure none of the ship overruns if it's placed near the edge of the grid
*/
function startSeed(shipSize, gridSize) {
	var seedOffset = gridSize - shipSize;
	var returnSeed = Math.ceil(Math.random() * seedOffset);
	return returnSeed;

}
/*
* rotates the ship 90degrees
*/
	function rotateShip(that, event, degrees, shipName)	 {
		event.stopPropagation();
		if (degrees === 90) {
			$(that).removeClass('rotate180');
			$(that).toggleClass('rotate90');
		} else {
			$(that).removeClass('rotate90');
			$(that).toggleClass('rotate180');
		}
		return getShipOrientation(shipName, degrees);

	}
/*
*
*/
	function getShipOrientation(shipName, degrees) {
		var orientation = sessionStorage.getItem(shipName);
		if (!orientation) { 
			 orientation = "horizontal";
		}	
		if (degrees === 90) {
			if (orientation === "horizontal") {
				orientation = "vertical";
			} else orientation = "horizontal";		
		} 		
		sessionStorage.setItem(shipName, orientation);
		return orientation;
	}	

/*
*	launches a ship into the dryDock
*/
	function loadShipYard() {
	$.each(ships, function (shipID, shipAttr) {
		var newShip = $("<div>").addClass("ship").attr('id', 'drag_'+shipID);
		
		$(newShip).append("<img id= 'ship_"+shipID+"' class='"+shipID+"' src='/assets/"+shipAttr.fileName+".png'>").draggable({
			containment: '#playerTable .placeGrid',
			snap: '.col',
			snapMode: 'outter',
			stop: function (event) {
				//this is where we'll get coordinates
			}
		}).bind('dblclick', function (event) {rotateShip(this, event, 90)});

		newShip.appendTo("#dryDock");		
	});
	}	
/*
* will be used later to programatically register a hit....
* CURRENTLY NOT IN USE
*/
function checkDropLocation (event, ui, that)	{
	event.stopPropagation();
	var coordinates = that.id.split("_");
	var rowNum = coordinates[1];
	var colNum = coordinates[2];
	if (rowNum > 8 ) {
		var shipName = ui.draggable.find("img").attr("class");
	}	
}