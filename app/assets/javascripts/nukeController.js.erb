/*
* fires the guns & sends coordinates off to the server & deals the with return
*/
    function nuke (event,that, asyncFlag, gameLoop=false) {
        event.stopPropagation();
        var ajaxMessage = "Missed... Try again";
        var coordinates = that.id.split("_");
        //we could've also just picked up the session from the server...
        var sessionID = sessionStorage.getItem("GameID");

        //get domain name
        var submitURL = window.location.href;
        var submitURL = submitURL.substring(0, submitURL.indexOf("/", 8));
        
        jqXHR = $.ajax({
            url: submitURL+"/nuke",
            async: asyncFlag,
            data: {'id': sessionID,
                   'x': coordinates[1],
                   'y': coordinates[2]},
            dataType: 'json',
            beforeSend: function () {

                $("#enemyTable").spin({
                      length: 30,
                      radius: 40,
                      left: '46%',
                      position: 'relative'
                });
               
            },
            success: function(data) {
        //turn these messages into into a modals!
                if (data !== null)
                if (data.error) {
                    ajaxMessage = data.error;
                } else {
                    if (data.status == "hit") {
                        ajaxMessage = "you've hit an enemy ship! Try again";
                    }                    
                    if (data.sunk) {
                        ajaxMessage = "You've just sunk an enemy "+data.sunk+"!"; 
                    } 
                    if (data.game_status) {
                        ajaxMessage = "Game Status has changed to "+data.game_status;
                        if (gameLoop) {
                            clearInterval(gameLoop);
                        }
                    }                    
                    if (data.prize) {
                        ajaxMessage = "Victory! Go claim your prize at: "+data.prize;
                        //cater for automatic game cancelation
                        if (gameLoop) {
                            clearInterval(gameLoop);
                        }
                    }                 
                    console.log(ajaxMessage);
                                        
                    registerHit(data, that);
                    applyCounterStrike(data);                                        
                } 
            },
            error: function (error) {
                alert(error.responseText);
            },
            complete: function () {
                $("#enemyTable").spin(false);
            }
        });
    
    }
/*
*
*/
 function registerHit(data, that) {
        if (data.status === "hit") {
            $(that).css('background', '#33A1C9');
            $(that).css('background-image', 'url(/assets/explosion.png)');
        } 
        $(that).css({opacity: 1});  
}
/*
*
*/
function applyCounterStrike (data, that) {
      $("#playerTable_"+data.x+"_"+data.y).addClass('hit');
      $("#playerTable_"+data.x+"_"+data.y).css({opacity: 1});
}
/*
*
*
*/
function getNukeCoords() {
    var row = Math.ceil(Math.random() * 10);
    var col = Math.ceil(Math.random() * 10);
}